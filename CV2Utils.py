class CV2Utils:
    pixChars = {
        ".":[0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x80],
        "▁":[0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xff],
        "▂":[0x00,0x00,0x00,0x00, 0x00,0x00,0xff,0xff],
        "▃":[0x00,0x00,0x00,0x00, 0x00,0xff,0xff,0xff],
        "▄":[0x00,0x00,0x00,0x00, 0xff,0xff,0xff,0xff],
        "▅":[0x00,0x00,0x00,0xff, 0xff,0xff,0xff,0xff],
        "▆":[0x00,0x00,0xff,0xff, 0xff,0xff,0xff,0xff],
        "▇":[0x00,0xff,0xff,0xff, 0xff,0xff,0xff,0xff],
        "█":[0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff],
        "▏":[0x80,0x80,0x80,0x80, 0x80,0x80,0x80,0x80],
        "▎":[0xC0,0xC0,0xC0,0xC0, 0xC0,0xC0,0xC0,0xC0],
        "▍":[0xE0,0xE0,0xE0,0xE0, 0xE0,0xE0,0xE0,0xE0],
        "▌":[0xF0,0xF0,0xF0,0xF0, 0xF0,0xF0,0xF0,0xF0],
        "▋":[0xF8,0xF8,0xF8,0xF8, 0xF8,0xF8,0xF8,0xF8],
        "▊":[0xFC,0xFC,0xFC,0xFC, 0xFC,0xFC,0xFC,0xFC],
        "▉":[0xFE,0xFE,0xFE,0xFE, 0xFE,0xFE,0xFE,0xFE],
        "▔":[0xFF,0x00,0x00,0x00, 0x00,0x00,0x00,0x00],
        "▕":[0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01],
        "▖":[0x00,0x00,0x00,0x00, 0xF0,0xF0,0xF0,0xF0],
        "▗":[0x00,0x00,0x00,0x00, 0x0F,0x0F,0x0F,0x0F],
        "▘":[0xF0,0xF0,0xF0,0xF0, 0x00,0x00,0x00,0x00],
        "▙":[0xF0,0xF0,0xF0,0xF0, 0xFF,0xFF,0xFF,0xFF],
        "▚":[0xF0,0xF0,0xF0,0xF0, 0x0F,0x0F,0x0F,0x0F],
        "▛":[0xFF,0xFF,0xFF,0xFF, 0xF0,0xF0,0xF0,0xF0],
        "▜":[0xFF,0xFF,0xFF,0xFF, 0x0F,0x0F,0x0F,0x0F],
        "▝":[0x0F,0x0F,0x0F,0x0F, 0x00,0x00,0x00,0x00],
        "▞":[0x0F,0x0F,0x0F,0x0F, 0xF0,0xF0,0xF0,0xF0],
        "▟":[0x0F,0x0F,0x0F,0x0F, 0xFF,0xFF,0xFF,0xFF],
        "■":[0x00,0x00,0x00,0x00, 0xFF,0xFF,0xFF,0xFF],
        #"█
        }

    def bitsMatched4Byte(x1,x2):
        m = 0
        for i in range(8):
            if ( (x1&(1<<i))==(x2&(1<<i)) ):
                m += 1
        return m       
    #print("pixChars = ",pixChars)
    def getPixChar(pixArray):
        retChar = " "
        retMatchVal = 0
        for c,a in CV2Utils.pixChars.items():
            matchVal = 0
            for i in range(8):
                matchVal += CV2Utils.bitsMatched4Byte(a[i],pixArray[i])
            if matchVal>retMatchVal:
                retMatchVal =  matchVal
                retChar = c   
        return   retChar,retMatchVal  

    def printImage2(image):
        height, width = image.shape
        for y0 in range(0,height,8):
            line = ""
            for x0 in range(0,width,8):
                pixArray = [0,0,0,0,0,0,0,0]
                for yi in range(8):
                    for xi in range(8):
                        if (y0+yi<height) and (x0+xi<width) and image[y0+yi,x0+xi]==0:
                            pixArray[yi] |= 1<<(7-xi)
                line = line+CV2Utils.getPixChar(pixArray)[0]
            print(line)                
                
            
